# Given a string s, return the longest palindromic substring in s.

class Solution:        
    def check_again(self, s: str, letter: str, pal: list) -> None:
        last = s.rindex(letter)
        first = s.index(letter)
        if last > first and self.is_palindrome(s[first:last+1]):
            pal.append(s[first:last+1])
        elif last != first:
            self.check_again(s[:last], letter, pal)
    
    def is_palindrome(self, s: str) -> bool:
        if s[::-1] == s:
            return True
        
    
    def longestPalindrome(self, s: str) -> str:
        palindromes = []
        for i in range(len(s)):
            last = s.rindex(s[i])
            first = i
            if last >= first and self.is_palindrome(s[first:last+1]):
                palindromes.append(s[first:last+1])
            elif last != first:
                self.check_again(s[first:last], s[i], palindromes)
        return max(palindromes, key=len)
