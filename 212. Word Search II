# In this approach I used trie structure

class Solution:
    def buildTrie(self, words: List[str]) -> dict:
        trie = {}
        for word in words:
            node = trie
            for c in word:
                if c not in node:
                    node[c] = {}
                node = node[c]
            node['$'] = word
        return trie
    
    def dfs(self, i: int, j: int, trie: dict, result: List[str]) -> None:
        char = self.board[i][j]
        last = trie[char].pop('$', False)
        if last:
            result.append(last)
        self.board[i][j] = '#'
        for x,y in ((1,0), (-1,0), (0,1), (0,-1)):
            ni, nj = i + x, j + y
            if 0 <= ni < self.ROW and 0 <= nj < self.COL and self.board[ni][nj] in trie[char]:
                self.dfs(ni, nj, trie[char], result)
        self.board[i][j] = char
    
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        self.board = board
        self.ROW, self.COL = len(board), len(board[0])
        result = []
        trie = self.buildTrie(words)
        for i in range(self.ROW):
            for j in range(self.COL):
                if board[i][j] in trie:
                    self.dfs(i, j, trie, result)
        return result
