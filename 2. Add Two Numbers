"""You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself."""


# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
        
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        result = ListNode()
        node1 = l1
        node2 = l2
        result_tail = result
        while node1 != None or node2 != None:
            over_ten = False
            if node1 == None:
                result_tail.val  = result_tail.val + node2.val
                node2 = node2.next
            elif node2 == None:
                result_tail.val  = result_tail.val + node1.val
                node1 = node1.next
            else:
                result_tail.val  = result_tail.val + node1.val + node2.val
                node1 = node1.next
                node2 = node2.next
            if result_tail.val >= 10:
                result_tail.val = result_tail.val % 10
                result_tail.next = ListNode(1)
                over_ten = True

            if node1 == None and node2 == None:
                break
            if not over_ten:
                result_tail.next = ListNode()
            result_tail = result_tail.next
            
        return result 
            
